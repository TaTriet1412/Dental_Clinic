// Define variables locally or move to a global scope if shared
$main-color: #eaeaea;
$stroke-color: black;

// Apply background to the host element or a specific wrapper inside the component
// Using :host assumes this component's styles are encapsulated
:host {
  display: block; // Ensure the host element takes up space
  background: $main-color;
  // Add padding or other layout styles as needed
  text-align: center; // Center content within the host
}

// Target elements within the component's template
.error-container {
  // Styles for the main container if needed
  padding-top: 100px;
  height: 100vh; // Full viewport height for centering

  h1 {
    margin: 0 auto 0 auto;
    color: $stroke-color;
    font-family: 'Encode Sans Semi Condensed', Verdana, sans-serif;
    font-size: 10rem;
    line-height: 10rem;
    font-weight: 200;
    text-align: center;
    transition: opacity 0.5s linear, margin-top 0.5s linear;
  }

  h2 {
    margin: 20px auto 30px auto;
    font-family: 'Encode Sans Semi Condensed', Verdana, sans-serif;
    font-size: 1.5rem;
    font-weight: 200;
    text-align: center;
    transition: opacity 0.5s linear, margin-top 0.5s linear;
  }

  // Apply loading styles when .loading class is present on .error-container
  &.loading {
    h1, h2 {
      margin-top: 0px;
      opacity: 0;
    }

    .gear.one, .gear.three {
      animation: clockwise 3s linear infinite;
    }

    .gear.two {
      animation: anticlockwise 3s linear infinite;
    }
  }

  .gears {
    position: relative;
    margin: 0 auto;
    width: auto; // Adjust width calculation if needed based on gear positions
    height: 120px; // Set height based on gear size and positioning
    // Example width calculation: (120px * 2) + 10px space = 250px centered
    // Or use inline-block/flex for gears if layout allows
  }

  .gear {
    position: relative; // Changed to relative for easier positioning within .gears
    display: inline-block; // Allow gears to sit side-by-side if needed
    vertical-align: middle; // Align gears vertically
    z-index: 0;
    width: 120px;
    height: 120px;
    margin: 0 5px; // Add some space between gears if inline
    border-radius: 50%;
    background: $stroke-color;

    // Use pseudo-elements for inner circles/details
    &::before {
      position: absolute;
      left: 5px;
      top: 5px;
      right: 5px;
      bottom: 5px;
      z-index: 2;
      content: "";
      border-radius: 50%;
      background: $main-color;
    }

    &::after {
      position: absolute;
      left: 25px;
      top: 25px;
      z-index: 3;
      content: "";
      width: 70px;
      height: 70px;
      border-radius: 50%;
      border: 5px solid $stroke-color;
      box-sizing: border-box;
      background: $main-color;
    }

    // Specific gear positioning (adjust as needed for layout)
    // These might need absolute positioning relative to .gears container
    &.one {
      // Example: Adjust positioning if using relative/inline-block
      // left: -130px; // Remove or adjust if not using absolute
      animation: anticlockwiseErrorStop 2s linear infinite;
    }

    &.two {
      // top: -75px; // Remove or adjust if not using absolute
      animation: anticlockwiseError 2s linear infinite;
    }

    &.three {
      // top: -235px; // Remove or adjust if not using absolute
      // left: 130px; // Remove or adjust if not using absolute
      animation: clockwiseError 2s linear infinite;
    }

    .bar {
      position: absolute;
      left: -15px; // (120 - 150) / 2
      top: 50%;
      z-index: 0;
      width: 150px;
      height: 30px;
      margin-top: -15px;
      border-radius: 5px;
      background: $stroke-color;

      &::before {
        position: absolute;
        left: 5px;
        top: 5px;
        right: 5px;
        bottom: 5px;
        z-index: 1;
        content: "";
        border-radius: 2px;
        background: $main-color;
      }

      // Use SCSS nesting for pseudo-classes
      &:nth-child(2) {
        transform: rotate(60deg);
      }

      &:nth-child(3) {
        transform: rotate(120deg);
      }
    }
  }
}


// Keyframes (include standard and prefixed versions)
@keyframes clockwise {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
@-webkit-keyframes clockwise {
  0% { -webkit-transform: rotate(0deg); }
  100% { -webkit-transform: rotate(360deg); }
}

@keyframes anticlockwise {
  0% { transform: rotate(360deg); }
  100% { transform: rotate(0deg); }
}
@-webkit-keyframes anticlockwise {
  0% { -webkit-transform: rotate(360deg); }
  100% { -webkit-transform: rotate(0deg); }
}

@keyframes clockwiseError {
  0% { transform: rotate(0deg); }
  20% { transform: rotate(30deg); }
  40% { transform: rotate(25deg); }
  60% { transform: rotate(30deg); }
  100% { transform: rotate(0deg); }
}
@-webkit-keyframes clockwiseError {
  0% { -webkit-transform: rotate(0deg); }
  20% { -webkit-transform: rotate(30deg); }
  40% { -webkit-transform: rotate(25deg); }
  60% { -webkit-transform: rotate(30deg); }
  100% { -webkit-transform: rotate(0deg); }
}

@keyframes anticlockwiseErrorStop {
  0% { transform: rotate(0deg); }
  20% { transform: rotate(-30deg); }
  60% { transform: rotate(-30deg); }
  100% { transform: rotate(0deg); }
}
@-webkit-keyframes anticlockwiseErrorStop {
  0% { -webkit-transform: rotate(0deg); }
  20% { -webkit-transform: rotate(-30deg); }
  60% { -webkit-transform: rotate(-30deg); }
  100% { -webkit-transform: rotate(0deg); }
}

@keyframes anticlockwiseError {
  0% { transform: rotate(0deg); }
  20% { transform: rotate(-30deg); }
  40% { transform: rotate(-25deg); }
  60% { transform: rotate(-30deg); }
  100% { transform: rotate(0deg); }
}
@-webkit-keyframes anticlockwiseError {
  0% { -webkit-transform: rotate(0deg); }
  20% { -webkit-transform: rotate(-30deg); }
  40% { -webkit-transform: rotate(-25deg); }
  60% { -webkit-transform: rotate(-30deg); }
  100% { -webkit-transform: rotate(0deg); }
}
$h-button: 48px;
$w-button: 102px;
$round: 0.75rem;

.button {
  cursor: pointer;
  min-width: 200px;
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  transition: all 0.25s ease;
  border: none;
  outline: none;
  padding: 12px 18px;
  border-radius: $round;
  background: radial-gradient(
      65.28% 65.28% at 50% 100%,
      rgba(223, 113, 255, 0.8) 0%,
      rgba(223, 113, 255, 0) 100%
    ),
    linear-gradient(0deg, #7a5af8, #7a5af8);

  &::before,
  &::after {
    content: '';
    position: absolute;
    transition: all 0.5s ease-in-out;
    z-index: 0;
  }

  &::before {
    $space: 1px;
    inset: $space;
    border-radius: calc($round - $space);
    background: linear-gradient(
      177.95deg,
      rgba(255, 255, 255, 0.19) 0%,
      rgba(255, 255, 255, 0) 100%
    );
  }

  &::after {
    $space: 2px;
    inset: $space;
    border-radius: calc($round - $space);
    background: radial-gradient(
        65.28% 65.28% at 50% 100%,
        rgba(223, 113, 255, 0.8) 0%,
        rgba(223, 113, 255, 0) 100%
      ),
      linear-gradient(0deg, #7a5af8, #7a5af8);
  }

  &:active {
    transform: scale(0.95);
  }

  &:hover {
    .fold {
      margin-top: -1rem;
      margin-right: -1rem;
    }

    svg.icon {
      fill: transparent;
      animation:
        dasharray 1s linear forwards,
        filled 0.1s linear forwards 0.95s;
    }
  }

  &:focus {
    svg.icon {
      fill: white;
    }
  }

  .inner {
    z-index: 2;
    gap: 6px;
    position: relative;
    width: 100%;
    color: white;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    font-weight: 500;
    line-height: 1.5;
    transition: color 0.2s ease-in-out;

    svg.icon {
      width: 18px;
      height: 18px;
      transition: fill 0.1s linear;
    }
  }

  .fold {
    z-index: 1;
    position: absolute;
    top: 0;
    right: 0;
    height: 1rem;
    width: 1rem;
    display: inline-block;
    transition: all 0.5s ease-in-out;
    background: radial-gradient(
      100% 75% at 55%,
      rgba(223, 113, 255, 0.8) 0%,
      rgba(223, 113, 255, 0) 100%
    );
    box-shadow: 0 0 3px black;
    border-bottom-left-radius: 0.5rem;
    border-top-right-radius: $round;

    &::after {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 150%;
      height: 150%;
      transform: rotate(45deg) translateX(0%) translateY(-18px);
      background-color: #e8e8e8;
      pointer-events: none;
    }
  }

  .points_wrapper {
    overflow: hidden;
    width: 100%;
    height: 100%;
    pointer-events: none;
    position: absolute;
    z-index: 1;

    .point {
      position: absolute;
      bottom: -10px;
      width: 2px;
      height: 2px;
      background-color: #fff;
      border-radius: 9999px;
      animation: floating-points infinite ease-in-out;
      pointer-events: none;
    }

    @for $i from 1 through 10 {
      .point:nth-child(#{$i}) {
        @if $i == 1 {
          left: 10%;
          opacity: 1;
          animation-duration: 2.35s;
          animation-delay: 0.2s;
        } @else if $i == 2 {
          left: 30%;
          opacity: 0.7;
          animation-duration: 2.5s;
          animation-delay: 0.5s;
        } @else if $i == 3 {
          left: 25%;
          opacity: 0.8;
          animation-duration: 2.2s;
          animation-delay: 0.1s;
        } @else if $i == 4 {
          left: 44%;
          opacity: 0.6;
          animation-duration: 2.05s;
        } @else if $i == 5 {
          left: 50%;
          opacity: 1;
          animation-duration: 1.9s;
        } @else if $i == 6 {
          left: 75%;
          opacity: 0.5;
          animation-duration: 1.5s;
          animation-delay: 1.5s;
        } @else if $i == 7 {
          left: 88%;
          opacity: 0.9;
          animation-duration: 2.2s;
          animation-delay: 0.2s;
        } @else if $i == 8 {
          left: 58%;
          opacity: 0.8;
          animation-duration: 2.25s;
          animation-delay: 0.2s;
        } @else if $i == 9 {
          left: 98%;
          opacity: 0.6;
          animation-duration: 2.6s;
          animation-delay: 0.1s;
        } @else if $i == 10 {
          left: 65%;
          opacity: 1;
          animation-duration: 2.5s;
          animation-delay: 0.2s;
        }
      }
    }
  }
}

@keyframes floating-points {
  0% {
    transform: translateY(0);
  }
  85% {
    opacity: 0;
  }
  100% {
    transform: translateY(-55px);
    opacity: 0;
  }
}

@keyframes dasharray {
  from {
    stroke-dasharray: 0 0 0 0;
  }
  to {
    stroke-dasharray: 68 68 0 0;
  }
}

@keyframes filled {
  to {
    fill: white;
  }
}


@import url('../../../../../public/assets/scss/snackbar.scss');